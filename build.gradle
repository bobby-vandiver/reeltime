buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.5.0'
        classpath "org.grails.plugins:hibernate:4.3.10.5"
        classpath "org.grails.plugins:database-migration:2.0.0.RC1"
    }
}

plugins {
    id "io.spring.dependency-management" version "0.5.4.RELEASE"
    id 'net.saliman.cobertura' version '2.3.1'
}

version "0.1-SNAPSHOT"
group "reeltime"

apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

// Custom plugin from buildSrc
apply plugin: "functional-test"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
    minifyJs = true
    minifyCss = true
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://dl.bintray.com/bluesliverx/grails-plugins" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"

    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:quartz:2.0.3"

    compile "org.grails.plugins:spring-security-core:3.0.0"
    compile "org.grails.plugins:spring-security-oauth2-provider:3.0.0-RC1"

    compile "commons-codec:commons-codec:1.10"
    compile "com.amazonaws:aws-java-sdk:1.10.43"

    compile "org.apache.tika:tika-parsers:1.11"
    compile "org.imgscalr:imgscalr-lib:4.2"

    runtime "org.grails.plugins:asset-pipeline"
    runtime "org.grails.plugins:database-migration:2.0.0.RC1"

    runtime "mysql:mysql-connector-java:5.1.38"

    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"

    testCompile "cglib:cglib:3.2.0"
    testCompile "cglib:cglib-nodep:3.2.0"
    testCompile "org.objenesis:objenesis:2.2"

    testCompile "org.grails:grails-datastore-rest-client:4.0.7.RELEASE"

    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1", {
        ["commons-logging", "xml-apis", "groovy"].each { exclude module: it }
    }

    // Note: It is recommended to update to a more robust driver (Chrome, Firefox etc.)
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0"

    console "org.grails:grails-console"
}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

run {
    systemProperty 'USE_LOCAL_MYSQL', System.getProperty('USE_LOCAL_MYSQL')
    systemProperty 'ENABLE_SQL_LOGGING', System.getProperty('ENABLE_SQL_LOGGING')
}

integrationTest {
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat = 'full'
    }
    systemProperty 'grails.env', 'test'
    systemProperty 'USE_LOCAL_MYSQL', System.getProperty('USE_LOCAL_MYSQL')
    systemProperty 'ENABLE_SQL_LOGGING', System.getProperty('ENABLE_SQL_LOGGING')
    systemProperty 'FFPROBE', System.getProperty('FFPROBE')
    systemProperty 'FFMPEG', System.getProperty('FFMPEG')
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
